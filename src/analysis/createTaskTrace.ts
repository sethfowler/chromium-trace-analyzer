import { MainThreadTasks } from 'tracium/lib/main-thread-tasks';

import { log } from '../log';
import { HasTaskId, TaskTrace, TaskWithData } from '../taskgraph';

// Given a raw JSON event trace generated by the Chromium profiler or
// Lighthouse, process it into a task trace that is organized into a graph of
// related tasks.
export async function createTaskTrace(
  trace: object
): Promise<TaskTrace<HasTaskId, {}>> {
  log.debug(`Starting createTaskTrace pass.`);

  const traceEvents = 'traceEvents' in trace ? trace : { traceEvents: trace };
  const allTasks = await MainThreadTasks.compute(traceEvents as LH.Trace);

  const result: TaskTrace<HasTaskId, {}> = {
    tasks: [],
    metadata: {}
  };

  // Tag each task with an id to make it easier to correlate the trace with
  // summary output. This also initializes the TaskWithData#metadata field so
  // later passes don't need to check if it exists.
  let nextTaskId = 0;
  for (const task of allTasks as TaskWithData<HasTaskId>[]) {
    task.metadata = {
      taskId: nextTaskId++
    };
    if (!task.parent) {
      result.tasks.push(task);
    }
  }

  return result;
}
