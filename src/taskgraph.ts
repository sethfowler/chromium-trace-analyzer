import { TaskNode } from 'tracium/lib/main-thread-tasks';
export { TaskNode } from 'tracium/lib/main-thread-tasks';

// A TaskNode (as generated by the Lighthouse/tracium parser from Chromium event
// traces), decorated with additional metadata. 
export interface TaskWithData<Data extends {} = {}> extends TaskNode {
  children: this[];
  parent?: this;
  metadata: Data;
};

export type AnyTask = TaskWithData<{}>;

// TaskWithAddedData<SomeTaskWithData, NewData> is SomeTaskWithData, augmented
// with additional metadata of type NewData. If you can figure out how to work
// the word "data" into this comment a few more times, open a PR.
export type TaskWithAddedData<
  T extends AnyTask,
  NewData extends {}
> = T extends TaskWithData<infer Data>
  ? TaskWithData<Data & NewData>
  : never;

// A trace (generated by the Lighthouse/tracium parsers from Chromium event
// traces), but with additional metadata on the tasks (TaskData) and on the
// trace itself (Metadata). Trace-level metadata is good for information that's
// global and isn't associated with a particular task.
export type TaskTrace<TaskData extends {}, Metadata extends {}> = {
  _TaskType?: TaskWithData<TaskData>;
  tasks: TaskWithData<TaskData>[];
  metadata: Metadata;
};

export type AnyTaskTrace = TaskTrace<{}, {}>;

// Like TaskWithAddedData, but for TaskTraces.
export type TaskTraceWithAddedData<
  T extends AnyTaskTrace,
  NewTaskData extends {},
  NewMetadata extends {}
> = T extends TaskTrace<infer TaskData, infer Metadata>
  ? T & TaskTrace<TaskData & NewTaskData, Metadata & NewMetadata>
  : never;

export type HasTaskId = {
  taskId: number;
};
